// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          Role?     @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  todo          Todo[]
  Comment       Comment[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  title       String
  description String?
  tags        String[]
  files       File[]
  comments    Comment[]
  status      Status    @default(ACTIVE)
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

enum Status {
  ACTIVE
  COMPLETED
  BLOCK
}

model File {
  id          String   @id @default(cuid())
  name        String
  size        Int
  secret      String   @unique
  contentType String
  createdAt   DateTime
  updatedAt   DateTime
  url         String   @unique
  todoId      String?

  todo Todo? @relation(fields: [todoId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  userId    String
  todoId    String?
  createdAt DateTime
  updatedAt DateTime

  todo Todo? @relation(fields: [todoId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}
